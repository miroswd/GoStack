// Criando aplicação

Crio as pastas
>>> yarn init -y // Cria o arquivo package.json
>>> yarn add express

>>> yarn // instala todas as dependências listada no package

- Criado um arquivo index.js

// Query e Routes Params

-> Query params = ?teste=1         
-> Routes params = /users/1       
-> Request body = {"name":"Miro"} // Passado através de um corpo json

// Utilizando o Insomnia
Criado um método Get para exibir o conteúdo da URL

Node => Ao executar, as variáveis são armazenadas

buscando o user através do index => user[index]

// Nodemon -> reinicialização do node de forma automática

>>> yarn add nodemon -D // -D flag de ferramenta de desenvolvimento

Adiciono scripts no package.json (nodemon index.js)


// CRUD - Create, Read, Update and Delete

Na parte de create, apenas foi adicionado um nome, recebido através do body
e adicionado ao array users

Para a visualização desses dados, é necessário permitir a leitura de arquivos json


Put -- Update/edição
Necessário buscar o index do usuário
Busquei o usuário pelo index e atualizei o nome 
poderia ter usado desestruturação pro name, mas como era só um dado, economizei 1 linha


Delete
Preciso buscar o usuário pelo index
Como está em um array, utilizarei o método splice(index, pos) de remover um item 


// MIDDLEWARES 
Função que geralmente recebe req e res e manipula esses dados
São passados 3 parâmetros: req, res,next
O next faz com que a execução do código, não seja interrompida

**Midleware Global
É aplicado em todos os métodos abaixo dele

**Middleware Local
Aplicado diretamente na rota

return bloqueia o fluxo

a função é passada como parametro nas rotas, antes dos parametros (req,res)

Os Middlewares podem alterar o req e res